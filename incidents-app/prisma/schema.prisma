// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


//models ,enums and indexes

model User {
 id Int @id @default(autoincrement())
 name String
 email String @unique
 role UserRole @default(DRIVER)
 // Required additions
 incidentsReported Incident[] @relation("IncidentReporter")
 incidentsAssigned Incident[] @relation("IncidentAssignee")
 incidentUpdates IncidentUpdate[]
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

enum UserRole {
 DRIVER
 FLEET_MANAGER
 ADMIN
}

model Car {
 id Int @id @default(autoincrement())
 regNumber String @unique
 model String
 make String
 year Int?
 incidents Incident[]
 carReadings CarReading[] 
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

model CarReading {
 id Int @id @default(autoincrement())
 carId Int
 odometer Int
 capturedAt DateTime @default(now())
 car Car @relation(fields: [carId], references: [id])
 incidents Incident[]
 @@index([carId])
}


model Incident {
 id Int @id @default(autoincrement())
 carId Int
 reportedById Int
 assignedToId Int

// Incident Details
 title String
 description String
 severity IncidentSeverity @default(LOW)
 status IncidentStatus @default(PENDING)
 type IncidentType

 // Location & Time
 location String?
 latitude Float?
 longitude Float?
 occurredAt DateTime
 reportedAt DateTime @default(now())

 // Associated
 carReadingId Int?
 images String[] @default([])
 documents String[] @default([])

// Resolution
 resolutionNotes String?
 estimatedCost Float?
 actualCost Float?
 resolvedAt DateTime?

// Timestamps
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt

// Relations
 car Car @relation(fields: [carId], references:[id])
 reportedBy User @relation("IncidentReporter", fields:[reportedById], references: [id])
 assignedTo User? @relation("IncidentAssignee", fields:[assignedToId], references: [id])
 carReading CarReading? @relation(fields: [carReadingId],references: [id])
 updates IncidentUpdate[]
 @@index([carId])
 @@index([reportedById])
 @@index([assignedToId])
 @@index([status])
 @@index([severity])
 @@index([occurredAt])
 @@map("incidents")
}


model IncidentUpdate {
 id Int @id @default(autoincrement())
 incidentId Int
 userId Int
 message String
 updateType IncidentUpdateType
 createdAt DateTime @default(now())
 incident Incident @relation(fields: [incidentId], references:[id])
 user User @relation(fields: [userId], references:[id])
 @@index([incidentId])
 @@index([userId])
 @@map("incident_updates")
}

enum IncidentSeverity {
 LOW
 MEDIUM
 HIGH
 CRITICAL
 @@map("incident_severities")
}

enum IncidentStatus {
 PENDING
 IN_PROGRESS
 RESOLVED
 CLOSED
 CANCELLED
 @@map("incident_statuses")
}

enum IncidentType {
 ACCIDENT
 BREAKDOWN
 THEFT
 VANDALISM
 MAINTENANCE_ISSUE
 TRAFFIC_VIOLATION
 FUEL_ISSUE
 OTHER
 @@map("incident_types")
}

enum IncidentUpdateType {
 STATUS_CHANGE
 ASSIGNMENT
 COMMENT
 COST_UPDATE
 RESOLUTION
 @@map("incident_update_types")
}

